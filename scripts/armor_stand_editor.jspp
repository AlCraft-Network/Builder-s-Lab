import "java.util.HashMap";
import "org.bukkit.GameMode";
import "org.bukkit.Particle";
import "org.bukkit.Sound";
import "org.bukkit.entity.ArmorStand";
import "org.bukkit.event.entity.EntityDamageByEntityEvent";
import "org.bukkit.metadata.FixedMetadataValue";
import "org.bukkit.util.EulerAngle";
import "org.bukkit.inventory.meta.Damageable";

void applyItemDamage(ItemStack item, CustomStack customStack, Player player) {
    var meta = (Damageable) item.getItemMeta();
    if (meta.getDamage() >= customStack.getMaxDurability()){
        player.getWorld().playSound(player.getLocation(), Sound.ENTITY_ITEM_BREAK, 1.0f, 1.0f);
        player.getWorld().spawnParticle(Particle.ITEM, player.getLocation().add(0, 1.0, 0), 15, 0.2, 0.2, 0.2, 0.1, item);
        if (item.equals(player.getInventory().getItemInMainHand())) {
            player.getInventory().setItemInMainHand(null);
        } else if (item.equals(player.getInventory().getItemInOffHand())) {
            player.getInventory().setItemInOffHand(null);
        }
    } else {
        meta.setDamage(meta.getDamage() + 1);
        item.setItemMeta(meta);
    }   
}

if ($event instanceof EntityDamageByEntityEvent entityEvent && entityEvent.getEntity() instanceof ArmorStand) {
    cancelEvent();

    HashMap<String, EulerAngle>[] poses = new HashMap[]{
        new HashMap<>() {{
            put("body", new EulerAngle(0, 0, 0));
            put("head", new EulerAngle(0, 0, 0));
            put("leftArm", new EulerAngle(Math.toRadians(-10), 0, Math.toRadians(-10)));
            put("leftLeg", new EulerAngle(Math.toRadians(-1), 0, Math.toRadians(-1)));
            put("rightArm", new EulerAngle(Math.toRadians(-15), 0, Math.toRadians(10)));
            put("rightLeg", new EulerAngle(Math.toRadians(1), 0, Math.toRadians(1)));
        }},
        new HashMap<>() {{
            put("body", new EulerAngle(0, 0, 0));
            put("head", new EulerAngle(0, 0, 0));
            put("leftArm", new EulerAngle(0, 0, 0));
            put("leftLeg", new EulerAngle(0, 0, 0));
            put("rightArm", new EulerAngle(0, 0, 0));
            put("rightLeg", new EulerAngle(0, 0, 0));
        }},
        new HashMap<>() {{
            put("body", new EulerAngle(0, 0, Math.toRadians(2)));
            put("head", new EulerAngle(Math.toRadians(15), 0, 0));
            put("leftArm", new EulerAngle(Math.toRadians(-30), Math.toRadians(15), Math.toRadians(15)));
            put("leftLeg", new EulerAngle(Math.toRadians(-1), 0, Math.toRadians(-1)));
            put("rightArm", new EulerAngle(Math.toRadians(-60), Math.toRadians(-20), Math.toRadians(-10)));
            put("rightLeg", new EulerAngle(Math.toRadians(1), 0, Math.toRadians(1)));
        }},
        new HashMap<>() {{
            put("body", new EulerAngle(0, 0, Math.toRadians(2)));
            put("head", new EulerAngle(Math.toRadians(-5), 0, 0));
            put("leftArm", new EulerAngle(Math.toRadians(10), 0, Math.toRadians(-5)));
            put("leftLeg", new EulerAngle(Math.toRadians(-3), Math.toRadians(-3), Math.toRadians(-3)));
            put("rightArm", new EulerAngle(Math.toRadians(-60), Math.toRadians(20), Math.toRadians(-10)));
            put("rightLeg", new EulerAngle(Math.toRadians(3), Math.toRadians(3), Math.toRadians(3)));
        }},
        new HashMap<>() {{
            put("body", new EulerAngle(0, 0, Math.toRadians(-2)));
            put("head", new EulerAngle(Math.toRadians(-15), 0, 0));
            put("leftArm", new EulerAngle(Math.toRadians(20), 0, Math.toRadians(-10)));
            put("leftLeg", new EulerAngle(Math.toRadians(5), Math.toRadians(-3), Math.toRadians(-3)));
            put("rightArm", new EulerAngle(Math.toRadians(-110), Math.toRadians(50), 0));
            put("rightLeg", new EulerAngle(Math.toRadians(-5), Math.toRadians(3), Math.toRadians(3)));
        }},
        new HashMap<>() {{
            put("body", new EulerAngle(0, 0, 0));
            put("head", new EulerAngle(Math.toRadians(-15), 0, 0));
            put("leftArm", new EulerAngle(Math.toRadians(-110), Math.toRadians(35), 0));
            put("leftLeg", new EulerAngle(Math.toRadians(5), Math.toRadians(-3), Math.toRadians(-3)));
            put("rightArm", new EulerAngle(Math.toRadians(-110), Math.toRadians(-35), 0));
            put("rightLeg", new EulerAngle(Math.toRadians(-5), Math.toRadians(3), Math.toRadians(3)));
        }},
        new HashMap<>() {{
            put("body", new EulerAngle(0, 0, 0));
            put("head", new EulerAngle(Math.toRadians(-15), 0, 0));
            put("leftArm", new EulerAngle(Math.toRadians(-110), Math.toRadians(-35), 0));
            put("leftLeg", new EulerAngle(Math.toRadians(5), Math.toRadians(-3), Math.toRadians(-3)));
            put("rightArm", new EulerAngle(Math.toRadians(-110), Math.toRadians(35), 0));
            put("rightLeg", new EulerAngle(Math.toRadians(-5), Math.toRadians(3), Math.toRadians(3)));
        }},
        new HashMap<>() {{
            put("body", new EulerAngle(0, 0, 0));
            put("head", new EulerAngle(Math.toRadians(-10), 0, Math.toRadians(-5)));
            put("leftArm", new EulerAngle(Math.toRadians(10), 0, Math.toRadians(-5)));
            put("leftLeg", new EulerAngle(Math.toRadians(-1), 0, Math.toRadians(-1)));
            put("rightArm", new EulerAngle(Math.toRadians(-70), Math.toRadians(-40), 0));
            put("rightLeg", new EulerAngle(Math.toRadians(1), 0, Math.toRadians(1)));
        }},
        new HashMap<>() {{
            put("body", new EulerAngle(0, 0, 0));
            put("head", new EulerAngle(Math.toRadians(16), Math.toRadians(20), 0));
            put("leftArm", new EulerAngle(Math.toRadians(4), Math.toRadians(8), Math.toRadians(237)));
            put("leftLeg", new EulerAngle(Math.toRadians(-14), Math.toRadians(-18), Math.toRadians(-16)));
            put("rightArm", new EulerAngle(Math.toRadians(246), 0, Math.toRadians(89)));
            put("rightLeg", new EulerAngle(Math.toRadians(8), Math.toRadians(20), Math.toRadians(4)));
        }},
        new HashMap<>() {{
            put("body", new EulerAngle(0, 0, 0));
            put("head", new EulerAngle(Math.toRadians(-10), 0, Math.toRadians(-5)));
            put("leftArm", new EulerAngle(Math.toRadians(-105), 0, 0));
            put("leftLeg", new EulerAngle(Math.toRadians(7), 0, 0));
            put("rightArm", new EulerAngle(Math.toRadians(-100), 0, 0));
            put("rightLeg", new EulerAngle(Math.toRadians(-46), 0, 0));
        }},
        new HashMap<>() {{
            put("body", new EulerAngle(0, Math.toRadians(22), 0));
            put("head", new EulerAngle(Math.toRadians(-5), Math.toRadians(18), 0));
            put("leftArm", new EulerAngle(Math.toRadians(8), 0, Math.toRadians(-114)));
            put("leftLeg", new EulerAngle(Math.toRadians(-111), Math.toRadians(55), 0));
            put("rightArm", new EulerAngle(0, Math.toRadians(84), Math.toRadians(111)));
            put("rightLeg", new EulerAngle(0, Math.toRadians(23), Math.toRadians(-13)));
        }},
        new HashMap<>() {{
            put("body", new EulerAngle(0, Math.toRadians(-18), 0));
            put("head", new EulerAngle(Math.toRadians(-10), Math.toRadians(-20), 0));
            put("leftArm", new EulerAngle(0, 0, Math.toRadians(-112)));
            put("leftLeg", new EulerAngle(0, 0, Math.toRadians(13)));
            put("rightArm", new EulerAngle(Math.toRadians(8), Math.toRadians(90), Math.toRadians(111)));
            put("rightLeg", new EulerAngle(Math.toRadians(-119), Math.toRadians(-42), 0));
        }},
        new HashMap<>() {{
            put("body", new EulerAngle(0, Math.toRadians(8), 0));
            put("head", new EulerAngle(Math.toRadians(-4), Math.toRadians(67), 0));
            put("leftArm", new EulerAngle(Math.toRadians(16), Math.toRadians(32), Math.toRadians(-8)));
            put("leftLeg", new EulerAngle(0, Math.toRadians(-75), Math.toRadians(-8)));
            put("rightArm", new EulerAngle(Math.toRadians(-99), Math.toRadians(63), 0));
            put("rightLeg", new EulerAngle(Math.toRadians(4), Math.toRadians(63), Math.toRadians(8)));
        }}
    };
    
    ArmorStand armorStand = (ArmorStand) entityEvent.getEntity();
    if (!armorStand.hasArms()) armorStand.setArms(true);

    $player.getWorld().spawnParticle(Particle.SWEEP_ATTACK, armorStand.getLocation().add(0,1,0), 1);
    $player.getWorld().playSound(armorStand.getLocation(), Sound.ENTITY_PLAYER_ATTACK_SWEEP, 0.6f, 1.0f);
    if ($player.getGameMode() != GameMode.CREATIVE) applyItemDamage($itemStack, $customStack, $player);

    int poseIndex = armorStand.hasMetadata("poseIndex") ? armorStand.getMetadata("poseIndex").get(0).asInt() : 0;

    HashMap<String, EulerAngle> newPose = poses[(poseIndex + 1) % poses.length];
    armorStand.setHeadPose(newPose.get("head"));
    armorStand.setBodyPose(newPose.get("body"));
    armorStand.setLeftArmPose(newPose.get("leftArm"));
    armorStand.setRightArmPose(newPose.get("rightArm"));
    armorStand.setLeftLegPose(newPose.get("leftLeg"));
    armorStand.setRightLegPose(newPose.get("rightLeg"));

    armorStand.setMetadata("poseIndex", new FixedMetadataValue($plugin, (poseIndex + 1) % poses.length));

}